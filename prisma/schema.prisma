generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id            String       @id @default(cuid())
  name          String?
  email         String       @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  accounts      Account[]
  chats         Chat[]
  documents     Document[]
  suggestions   Suggestion[]
  sessions      Session[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}




// Chat
model Chat {
  id         String    @id @default(uuid())
  createdAt  DateTime
  title      String
  userId     String
  visibility Visibility @default(private)

  user       User      @relation(fields: [userId], references: [id])
  messages   Message[]
  votes      Vote[]
}

// Message (v2)
model Message {
  id         String   @id @default(uuid())
  chatId     String
  role       String
  parts      Json
  attachments Json
  createdAt  DateTime

  chat       Chat     @relation(fields: [chatId], references: [id])
  votes      Vote[]
}

// Vote (v2)
model Vote {
  chatId    String
  messageId String
  isUpvoted Boolean

  chat      Chat     @relation(fields: [chatId], references: [id])
  message   Message  @relation(fields: [messageId], references: [id])

  @@id([chatId, messageId])
}

// Document
model Document {
  id        String   @default(uuid())
  createdAt DateTime
  title     String
  content   String?
  kind      DocumentKind @default(text)
  userId    String

  user       User        @relation(fields: [userId], references: [id])
  suggestions Suggestion[]

  @@id([id])
}

// Suggestion
model Suggestion {
  id                  String   @id @default(uuid())
  documentId          String
  documentCreatedAt   DateTime
  originalText        String
  suggestedText       String
  description         String?
  isResolved          Boolean  @default(false)
  userId              String
  createdAt           DateTime

  user                User     @relation(fields: [userId], references: [id])
  document            Document @relation(fields: [documentId], references: [id])
}



// Enums
enum Visibility {
  public
  private
}

enum DocumentKind {
  text
  code
  image
  sheet
}
